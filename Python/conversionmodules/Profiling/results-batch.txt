Timer unit: 1e-06 s

Total time: 4.88857 s
File: imagetoaudio.py
Function: image_convolution at line 11

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    11                                           @profile
    12                                           def image_convolution(image, kernel_size, step_size):
    13                                               """
    14                                               Compute the average RGB values for each channel
    15                                               of an image array in blocks of size kernel_size x kernel_size,
    16                                               stepping by step_size.
    17                                           
    18                                               Parameters
    19                                               ----------
    20                                               image : numpy array
    21                                                   The image array to process
    22                                               kernel_size : int
    23                                                   The size of the kernel to use
    24                                               step_size : int
    25                                                   The step size to use
    26                                           
    27                                               Returns
    28                                               -------
    29                                               rgb_dict : dict
    30                                                   A dictionary with keys '1', '2', and '3' containing the
    31                                                   average red, green, and blue values respectively, for each
    32                                                   block of the image array
    33                                               """
    34                                           
    35         7          5.9      0.8      0.0      if image is None:
    36                                                   raise ValueError('Image cannot be null')
    37                                           
    38         7          5.5      0.8      0.0      if kernel_size <= 0 or step_size <= 0:
    39                                                   raise ValueError('Kernel size and step size must be positive')
    40                                           
    41         7         13.9      2.0      0.0      x = image.shape[0]
    42         7          3.8      0.5      0.0      y = image.shape[1]
    43                                           
    44         7          4.1      0.6      0.0      if kernel_size > x or kernel_size > y:
    45                                                   raise ValueError('Kernel size cannot be larger than the image')
    46                                           
    47         7         30.5      4.4      0.0      red_values = image[:, :, 0]
    48         7          5.6      0.8      0.0      green_values = image[:, :, 1]
    49         7          5.0      0.7      0.0      blue_values = image[:, :, 2]
    50                                           
    51         7          7.9      1.1      0.0      rgb_dict = {'1': [], '2': [], '3': []}
    52                                           
    53                                               # Calculate average values for each channel
    54       424        181.2      0.4      0.0      for i in range(0, x - kernel_size + 1, step_size):
    55     92516      35383.9      0.4      0.7          for j in range(0, y - kernel_size + 1, step_size):
    56     92099    1603116.1     17.4     32.8              avg_red = (np.mean(red_values[i:i + kernel_size, j:j + kernel_size])+0.000000000001) / 256
    57     92099    1580878.3     17.2     32.3              avg_green = (np.mean(green_values[i:i + kernel_size, j:j + kernel_size])+0.000000000001) / 256
    58     92099    1574704.2     17.1     32.2              avg_blue = (np.mean(blue_values[i:i + kernel_size, j:j + kernel_size])+0.000000000001) / 256
    59                                                       
    60     92099      35318.8      0.4      0.7              rgb_dict['1'].append(avg_red)
    61     92099      29550.0      0.3      0.6              rgb_dict['2'].append(avg_green)
    62     92099      29342.4      0.3      0.6              rgb_dict['3'].append(avg_blue)
    63         7         11.3      1.6      0.0      return rgb_dict

Total time: 0.0611211 s
File: imagetoaudio.py
Function: interpolate_rgb_array at line 65

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    65                                           @profile
    66                                           def interpolate_rgb_array(array, target_length):
    67                                               """
    68                                               Interpolates an array of RGB values to a target length.
    69                                           
    70                                               Parameters
    71                                               ----------
    72                                               array : numpy array
    73                                                   The array of RGB values to interpolate
    74                                               target_length : int
    75                                                   The target length of the interpolated array
    76                                           
    77                                               Returns
    78                                               -------
    79                                               numpy array
    80                                                   The interpolated array of RGB values
    81                                               """
    82        21         12.8      0.6      0.0      if array is None:
    83                                                   raise ValueError('Array cannot be null')
    84        21         10.5      0.5      0.0      if target_length <= 0:
    85                                                   raise ValueError('Target length must be greater than 0')
    86                                           
    87        42      60767.5   1446.8     99.4      return np.interp(np.linspace(0, len(array) - 1, target_length), 
    88        21        330.3     15.7      0.5                       np.arange(len(array)), array)

Total time: 0.150105 s
File: imagetoaudio.py
Function: modulate_frequency at line 90

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    90                                           @profile
    91                                           def modulate_frequency(wave_type, base_time, array, base_frequency, 
    92                                                                  modulation_duration=6, modulation_intensity=0.4, envelope_intensity=1.0,intensity = .8):
    93                                               """
    94                                               wave_type: 'sine', 'square', 'triangle'
    95                                               base_time: the time array
    96                                               array: the interpolated RGB array for modulation
    97                                               base_frequency: the base frequency (e.g., 261.6 for C4)
    98                                               modulation_duration: how long the modulation lasts before fading out
    99                                               modulation_intensity: how strong the modulation is applied
   100                                               envelope_intensity: intensity of the fade-out over time (0 = immediate stop, 1 = full duration)
   101                                               """
   102                                           
   103                                               # Apply a smoothing window to prevent drastic changes in the modulated frequency
   104         7      33450.1   4778.6     22.3      smooth_rgb = np.convolve(array, np.ones(50) / 50, mode='same')  # Smooth over 50 samples
   105                                           
   106                                               # Normalize smoothed RGB values to a modulation factor range
   107         7       9424.2   1346.3      6.3      modulated_frequency = base_frequency + (smooth_rgb - np.mean(smooth_rgb)) * modulation_intensity
   108                                           
   109                                               # Create a linear fade-out envelope for the modulation after 'modulation_duration' seconds
   110         7       5643.0    806.1      3.8      fade_time = np.minimum(base_time / modulation_duration, 1)  # From 1 (full intensity) to 0 (no intensity)
   111         7       5407.0    772.4      3.6      modulation_envelope = (1 - fade_time) * envelope_intensity  # Decreases from 1 to 0 over time, scaled by envelope_intensity
   112                                           
   113                                               # Apply modulation based on wave type
   114         7          5.6      0.8      0.0      match wave_type: 
   115         7         10.8      1.5      0.0          case 'sine':
   116         2       7073.2   3536.6      4.7              modulated_wave = np.sin(2 * np.pi * modulated_frequency * base_time) * modulation_envelope
   117         5          3.7      0.7      0.0          case 'saw':
   118         1      20803.3  20803.3     13.9              modulated_wave = signal.sawtooth(2 * np.pi * modulated_frequency * base_time) * modulation_envelope
   119         4          2.3      0.6      0.0          case 'square':
   120         4      66066.1  16516.5     44.0              modulated_wave = signal.square(2 * np.pi * modulated_frequency * base_time) * modulation_envelope
   121                                           
   122         7       2216.0    316.6      1.5      return modulated_wave * intensity  # Adjust overall wave amplitude

Total time: 1.46666 s
File: imagetoaudio.py
Function: generate_sound at line 125

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   125                                           @profile
   126                                           def generate_sound(
   127                                               rgb_dict,
   128                                               out_path,
   129                                               sound_level,
   130                                               file_name,
   131                                               sample_rate=44800,
   132                                               sound_duration=6,
   133                                               modulation_intensity=0.4,
   134                                               modulation_envelope_intensity=0.8,
   135                                               modulation_duration=6,
   136                                               lfo_scalar_freq=1,
   137                                               lfo_scalar_amplitude=1,
   138                                               lfo_intensity=1,
   139                                               overtone_num_scalar=1,
   140                                           ):
   141                                               """
   142                                               Generate a sound based on the given RGB values.
   143                                           
   144                                               Parameters
   145                                               ----------
   146                                               rgb_dict : dict
   147                                                   A dictionary mapping color channel names ('1', '2', '3') to lists of RGB values.
   148                                               out_path : str
   149                                                   The path to write the output sound file to.
   150                                               sound_level : float
   151                                                   The volume of the sound, from 0 (silent) to 1 (maximum volume).
   152                                               file_name : str
   153                                                   The name of the output file, without extension.
   154                                               sample_rate : int, optional
   155                                                   The sample rate of the output sound file, in Hz. Default is 44800.
   156                                               sound_duration : float, optional
   157                                                   The duration of the sound, in seconds. Default is 6.
   158                                               modulation_intensity : float, optional
   159                                                   The intensity of the modulation, from 0 (no modulation) to 1 (maximum modulation). Default is 0.4.
   160                                               modulation_envelope_intensity : float, optional
   161                                                   The intensity of the modulation envelope, from 0 (no modulation) to 1 (maximum modulation). Default is 0.8.
   162                                               modulation_duration : float, optional
   163                                                   The duration of the modulation, in seconds. Default is 6.
   164                                               lfo_scalar_freq : float, optional
   165                                                   The frequency scaling factor for the LFO. Default is 1.
   166                                               lfo_scalar_amplitude : float, optional
   167                                                   The amplitude scaling factor for the LFO. Default is 1.
   168                                               lfo_intensity : float, optional
   169                                                   The intensity of the LFO, from 0 (no LFO) to 1 (maximum LFO). Default is 1.
   170                                           
   171                                               Returns
   172                                               -------
   173                                               None
   174                                               """
   175         7          4.2      0.6      0.0      if rgb_dict is None:
   176                                                   raise ValueError('rgb_dict cannot be null')
   177         7          2.6      0.4      0.0      if out_path is None:
   178                                                   raise ValueError('out_path cannot be null')
   179         7          2.1      0.3      0.0      if file_name is None:
   180                                                   raise ValueError('file_name cannot be null')
   181         7          4.8      0.7      0.0      if sound_level < 0 or sound_level > 1:
   182                                                   raise ValueError('sound_level must be between 0 and 1')
   183                                           
   184         7       4773.8    682.0      0.3      avg_red_overall = np.mean(rgb_dict['1'])
   185         7       4295.3    613.6      0.3      avg_green_overall = np.mean(rgb_dict['2'])
   186         7       4245.5    606.5      0.3      avg_blue_overall = np.mean(rgb_dict['3'])
   187                                           
   188                                               # Find dominant color channel
   189        28         59.6      2.1      0.0      dominant_color = max([('red', avg_red_overall), 
   190         7          3.4      0.5      0.0                            ('green', avg_green_overall), 
   191        21         11.2      0.5      0.0                            ('blue', avg_blue_overall)], key=lambda x: x[1])[0]
   192                                           
   193                                               # Set frequency for C4 tone (~261.6 Hz)
   194         7          3.5      0.5      0.0      base_frequency = 261.6  # Duration of the sound in seconds
   195                                           
   196                                               # Create a time array
   197         7       2434.3    347.8      0.2      time = np.arange(0, sound_duration, 1/sample_rate)
   198                                           
   199                                               # Interpolate RGB array to match the time array length
   200         7      20496.4   2928.1      1.4      interpolate_red = interpolate_rgb_array(rgb_dict['1'], len(time))
   201         7      20276.4   2896.6      1.4      interpolate_green = interpolate_rgb_array(rgb_dict['2'], len(time))
   202         7      20710.4   2958.6      1.4      interpolate_blue = interpolate_rgb_array(rgb_dict['3'], len(time))
   203                                               
   204         7          7.0      1.0      0.0      if dominant_color == 'red':
   205        12     102601.2   8550.1      7.0          combined_wave = modulate_frequency('square', time, interpolate_red, base_frequency, 
   206         8          3.5      0.4      0.0                                             modulation_duration=modulation_duration, modulation_intensity=modulation_intensity, envelope_intensity=modulation_envelope_intensity,intensity = .9) * sound_level
   207         3          2.1      0.7      0.0      elif dominant_color == 'green':
   208         3      31521.5  10507.2      2.1          combined_wave = modulate_frequency('saw', time, interpolate_green, base_frequency,
   209         2          0.8      0.4      0.0                                             modulation_duration=modulation_duration, modulation_intensity=modulation_intensity, envelope_intensity=modulation_envelope_intensity,intensity = .9) * sound_level
   210                                               else:  # 'blue'
   211         6      24585.9   4097.7      1.7          combined_wave = modulate_frequency('sine', time, interpolate_blue, base_frequency, 
   212         4          1.9      0.5      0.0                                             modulation_duration=modulation_duration, modulation_intensity=modulation_intensity, envelope_intensity=modulation_envelope_intensity,intensity = .9) * sound_level
   213                                           
   214                                               #Generate overtones and apply lfo
   215                                           
   216         7        625.8     89.4      0.0      average_color = color_avg(avg_red_overall,avg_green_overall,avg_blue_overall)
   217                                           
   218         7    1098557.7 156936.8     74.9      final_sound = modify_base_tone(sound = combined_wave, color_average=average_color, overtone_type = 'sine', time=time, interpolate_red=interpolate_red, interpolate_green=interpolate_green, interpolate_blue=interpolate_blue, intensity = lfo_intensity, scalar_freq=lfo_scalar_freq, scalar_amplitude=lfo_scalar_amplitude,base_freq=base_frequency,overtone_num_scalar = overtone_num_scalar)
   219                                               
   220                                           
   221                                               # Save the sound file
   222         7       3374.7    482.1      0.2      final_sound = final_sound * sound_level
   223         7       5833.6    833.4      0.4      final_sound = (final_sound * 32767).astype(np.int16)
   224                                               
   225                                               # Write the output to a WAV file
   226         7         17.1      2.4      0.0      output_file_name = f"{out_path}{file_name}_output_{dominant_color}.wav"
   227         7          4.0      0.6      0.0      try:
   228         7     122200.9  17457.3      8.3          scipy.io.wavfile.write(output_file_name, sample_rate, final_sound)
   229                                               except Exception as e:
   230                                                   print(f"Error writing to file: {e}")

Total time: 0.0005311 s
File: imagetoaudio.py
Function: color_avg at line 233

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   233                                           @profile
   234                                           def color_avg(r, g, b):
   235                                               """
   236                                               Calculate the average of the given RGB values.
   237                                           
   238                                               Parameters
   239                                               ----------
   240                                               r, g, b : float
   241                                                   The red, green, and blue color values.
   242                                           
   243                                               Returns
   244                                               -------
   245                                               float
   246                                                   The average of the given RGB values.
   247                                               """
   248         7          7.6      1.1      1.4      if r is None or g is None or b is None:
   249                                                   raise ValueError('RGB values cannot be null')
   250         7        523.5     74.8     98.6      return np.mean([r, g, b])

Total time: 0 s
File: imagetoaudio.py
Function: color_diff at line 253

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   253                                           @profile
   254                                           def color_diff(r, g, b):
   255                                               
   256                                               """
   257                                               Calculate the difference between the given RGB values.
   258                                           
   259                                               Parameters
   260                                               ----------
   261                                               r, g, b : float
   262                                                   The red, green, and blue color values.
   263                                           
   264                                               Returns
   265                                               -------
   266                                               float
   267                                                   The difference between the given RGB values.
   268                                               """
   269                                               if r is None or g is None or b is None:
   270                                                   raise ValueError('RGB values cannot be null')
   271                                               return r - g - b

Total time: 0.0001256 s
File: imagetoaudio.py
Function: calculate_overtone_frequencies at line 273

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   273                                           @profile
   274                                           def calculate_overtone_frequencies(base_freq, num, type):
   275                                               """
   276                                               Calculate the overtone frequencies based on the given parameters.
   277                                           
   278                                               Parameters
   279                                               ----------
   280                                               base_freq : float
   281                                                   The base frequency for the overtones.
   282                                               num : int
   283                                                   The number of overtones to calculate.
   284                                               type : str
   285                                                   The type of waveform for the overtones. Can be 'sine', 'square', or 'sawtooth'.
   286                                           
   287                                               Returns
   288                                               -------
   289                                               list
   290                                                   A list of calculated overtone frequencies.
   291                                               """
   292         7          3.9      0.6      3.1      frequencies = []
   293                                               
   294         7          2.9      0.4      2.3      if type == 'sine':
   295       252        114.5      0.5     91.2          frequencies = [base_freq * n for n in range(2, num + 2)]
   296                                               elif type == 'square':
   297                                                   frequencies = [base_freq * n + 1 for n in range(2, num + 2)]
   298                                               elif type == 'sawtooth':
   299                                                   frequencies = [base_freq * n + 1 for n in range(2, num + 2)]
   300                                           
   301         7          4.3      0.6      3.4      return frequencies

Total time: 0.0002916 s
File: imagetoaudio.py
Function: map_to_range_with_variability at line 303

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   303                                           @profile
   304                                           def map_to_range_with_variability(x, input_min, input_max, output_min=0.2, output_max=30, variability_factor=2):
   305                                               # Clamp the input value to ensure it's within the expected range
   306                                               """
   307                                               Map a value from an input range to an output range with added variability.
   308                                           
   309                                               The input value is first clamped to the input range, then scaled to [0, 1].
   310                                               An exponential function is applied to increase the variability of the output.
   311                                               Finally, the value is linearly mapped to the output range.
   312                                           
   313                                               Parameters
   314                                               ----------
   315                                               x : float
   316                                                   The input value.
   317                                               input_min : float
   318                                                   The minimum of the input range.
   319                                               input_max : float
   320                                                   The maximum of the input range.
   321                                               output_min : float, optional
   322                                                   The minimum of the output range. Defaults to 0.2.
   323                                               output_max : float, optional
   324                                                   The maximum of the output range. Defaults to 30.
   325                                               variability_factor : float, optional
   326                                                   The exponent to which the normalized input should be raised. Defaults to 2.
   327                                           
   328                                               Returns
   329                                               -------
   330                                               float
   331                                                   The mapped value.
   332                                               """
   333        18         20.5      1.1      7.0      if x is None:
   334                                                   raise ValueError('Input value cannot be null')
   335        18         10.7      0.6      3.7      if input_min is None:
   336                                                   raise ValueError('Input minimum cannot be null')
   337        18          9.2      0.5      3.2      if input_max is None:
   338                                                   raise ValueError('Input maximum cannot be null')
   339        18          8.8      0.5      3.0      if output_min is None:
   340                                                   raise ValueError('Output minimum cannot be null')
   341        18          7.7      0.4      2.6      if output_max is None:
   342                                                   raise ValueError('Output maximum cannot be null')
   343        18          8.3      0.5      2.8      if variability_factor is None:
   344                                                   raise ValueError('Variability factor cannot be null')
   345        18         10.7      0.6      3.7      if input_min >= input_max:
   346                                                   raise ValueError('Input range is invalid')
   347        18         23.3      1.3      8.0      if output_min >= output_max:
   348                                                   raise ValueError('Output range is invalid')
   349                                               
   350                                           
   351        18         70.9      3.9     24.3      x = max(min(x, input_max), input_min)
   352                                               # Scale the input to [0, 1]
   353        18         29.9      1.7     10.3      normalized_input = (x - input_min) / (input_max - input_min)
   354                                               # Apply an exponential function to increase variability
   355        18         59.2      3.3     20.3      variable_value = math.pow(normalized_input, variability_factor)
   356                                               # Linearly map the variable value to the output range
   357        18         32.4      1.8     11.1      return output_min + (output_max - output_min) * variable_value

Total time: 0.825821 s
File: imagetoaudio.py
Function: apply_overtones at line 359

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   359                                           @profile
   360                                           def apply_overtones(sound, wave_type, base_freq, brightness, rgb_dict, time,overtone_num_scalar=1):
   361                                               """
   362                                               Apply overtones to a sound based on an image's characteristics.
   363                                           
   364                                               Parameters
   365                                               ----------
   366                                               sound : array_like
   367                                                   The sound to which overtones should be applied.
   368                                               wave_type : str
   369                                                   The type of wave to apply overtones to. Options are 'sine', 'square', and 'sawtooth'.
   370                                               base_freq : float
   371                                                   The base frequency of the sound.
   372                                               brightness : float
   373                                                   The brightness of the image.
   374                                               rgb_dict : dict
   375                                                   A dictionary with keys '1', '2', and '3' containing the red, green, and blue color channels of the image.
   376                                               time : array_like
   377                                                   An array of time values at which the sound should be evaluated.
   378                                           
   379                                               Returns
   380                                               -------
   381                                               array_like
   382                                                   The sound with overtones applied.
   383                                               """
   384         7          5.4      0.8      0.0      if sound is None:
   385                                                   raise ValueError('Input sound cannot be null')
   386         7          4.3      0.6      0.0      if wave_type is None:
   387                                                   raise ValueError('Input wave type cannot be null')
   388         7          4.1      0.6      0.0      if base_freq is None:
   389                                                   raise ValueError('Input base frequency cannot be null')
   390         7          4.1      0.6      0.0      if brightness is None:
   391                                                   raise ValueError('Input brightness cannot be null')
   392         7          3.2      0.5      0.0      if rgb_dict is None:
   393                                                   raise ValueError('Input RGB dictionary cannot be null')
   394         7          3.4      0.5      0.0      if time is None:
   395                                                   raise ValueError('Input time array cannot be null')
   396                                           
   397                                               # Derive a seed from the image's characteristics (e.g., average of RGB channels)
   398         7       6367.1    909.6      0.8      seed_value = int(np.mean([np.mean(rgb_dict['1']), np.mean(rgb_dict['2']), np.mean(rgb_dict['3'])]) * 100)
   399                                           
   400                                               # Calculate intensity adjustment factor based on brightness
   401         7         10.8      1.5      0.0      intensity_scale = 0.3 + (0.7 * brightness)  # Intensity scale varies with brightness
   402                                           
   403        14        709.3     50.7      0.1      @profile
   404        14         10.5      0.8      0.0      def calculate_intensity(n, total_overtones):
   405                                                   # Intensity is scaled between 0 and 1 based on position and seed value
   406                                                   base_intensity = .7 - (n / total_overtones)  # Decreases linearly from 1 to 0
   407                                                   variability = (seed_value % (n + 1)) / (total_overtones + 1)  # Adds some variation
   408                                                   intensity = base_intensity * (1 + variability * intensity_scale)
   409                                                   # Ensure the intensity remains within [0, 1] range
   410                                                   return np.clip(intensity, 0, 1)
   411                                           
   412                                               # Match based on wave type and generate overtones with variable intensities
   413         7          2.6      0.4      0.0      match wave_type:
   414         7          4.3      0.6      0.0          case 'sine':
   415         7         75.0     10.7      0.0              overtone_amount = int(round(4 + (12 - 4) * brightness)*overtone_num_scalar)
   416         7        263.0     37.6      0.0              overtone_frequencies = calculate_overtone_frequencies(base_freq, overtone_amount, 'sine')
   417       252        518.8      2.1      0.1              for n in range(overtone_amount):
   418       245      15440.6     63.0      1.9                  intensity = calculate_intensity(n, overtone_amount)
   419       245     802378.1   3275.0     97.2                  sound += np.sin(2 * np.pi * overtone_frequencies[n] * time) * intensity
   420                                           
   421                                                   case 'square':
   422                                                       overtone_amount = int(round(10 + (20 - 10) * brightness)*overtone_num_scalar)
   423                                                       overtone_frequencies = calculate_overtone_frequencies(base_freq, overtone_amount, 'square')
   424                                                       for n in range(overtone_amount):
   425                                                           intensity = calculate_intensity(n, overtone_amount)
   426                                                           sound += np.square(2 * np.pi * overtone_frequencies[n] * time) * intensity
   427                                           
   428                                                   case 'sawtooth':
   429                                                       overtone_amount = int(round(8 + (15 - 8) * brightness)*overtone_num_scalar)
   430                                                       overtone_frequencies = calculate_overtone_frequencies(base_freq, overtone_amount, 'sawtooth')
   431                                                       for n in range(overtone_amount):
   432                                                           intensity = calculate_intensity(n, overtone_amount)
   433                                                           sound += np.sawtooth(2 * np.pi * overtone_frequencies[n] * time) * intensity
   434                                           
   435         7         16.4      2.3      0.0      return sound

Total time: 0.001476 s
File: imagetoaudio.py
Function: calculate_intensity at line 403

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   403                                               @profile
   404                                               def calculate_intensity(n, total_overtones):
   405                                                   # Intensity is scaled between 0 and 1 based on position and seed value
   406        35         79.4      2.3      5.4          base_intensity = .7 - (n / total_overtones)  # Decreases linearly from 1 to 0
   407        35         37.3      1.1      2.5          variability = (seed_value % (n + 1)) / (total_overtones + 1)  # Adds some variation
   408        35         85.5      2.4      5.8          intensity = base_intensity * (1 + variability * intensity_scale)
   409                                                   # Ensure the intensity remains within [0, 1] range
   410        35       1273.8     36.4     86.3          return np.clip(intensity, 0, 1)

Total time: 0.015567 s
File: imagetoaudio.py
Function: brightness at line 437

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   437                                           @profile
   438                                           def brightness(rgb):
   439         7      15567.0   2223.9    100.0      return np.mean(rgb)

Total time: 0.0063506 s
File: imagetoaudio.py
Function: multiply_wave at line 441

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   441                                           @profile
   442                                           def multiply_wave(wave, second_wave, scalar=1):
   443                                               """
   444                                               Multiply two waves together with an optional scalar factor.
   445                                           
   446                                               Parameters
   447                                               ----------
   448                                               wave : array_like
   449                                                   The first wave to be multiplied.
   450                                               second_wave : array_like
   451                                                   The second wave to be multiplied.
   452                                               scalar : float, optional
   453                                                   The scalar factor to apply to the second wave. Defaults to 1.
   454                                           
   455                                               Returns
   456                                               -------
   457                                               array_like
   458                                                   The product of the two waves, scaled by the scalar factor.
   459                                               """
   460         7          8.6      1.2      0.1      if wave is None or second_wave is None:
   461                                                   raise ValueError("wave and second_wave cannot be null")
   462         7          3.5      0.5      0.1      if scalar is None:
   463                                                   raise ValueError("scalar cannot be null")
   464         7       6338.5    905.5     99.8      return wave * (second_wave*scalar)

Total time: 0.253652 s
File: imagetoaudio.py
Function: apply_lfo at line 466

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   466                                           @profile
   467                                           def apply_lfo(sound, color_average, time, interpolate_red, interpolate_green, interpolate_blue, intensity=1, scalar_freq=1, scalar_amplitude=1):
   468                                               """
   469                                               Apply a Low Frequency Oscillator (LFO) to a sound wave.
   470                                           
   471                                               Parameters
   472                                               ----------
   473                                               sound : numpy array
   474                                                   The input sound wave to be modified.
   475                                               color_average : float
   476                                                   The average color value of the image.
   477                                               time : numpy array
   478                                                   The time array of the sound wave.
   479                                               interpolate_red : numpy array
   480                                                   The interpolated red color channel of the image.
   481                                               interpolate_green : numpy array
   482                                                   The interpolated green color channel of the image.
   483                                               interpolate_blue : numpy array
   484                                                   The interpolated blue color channel of the image.
   485                                               intensity : float, optional
   486                                                   The intensity of the LFO. Defaults to 1.
   487                                               scalar_freq : float, optional
   488                                                   The frequency scalar of the LFO. Defaults to 1.
   489                                               scalar_amplitude : float, optional
   490                                                   The amplitude scalar of the LFO. Defaults to 1.
   491                                           
   492                                               Returns
   493                                               -------
   494                                               numpy array
   495                                                   The modified sound wave.
   496                                               """
   497         7        111.6     15.9      0.0      lfo_amount = int(round(1 + (5 - 1) * color_average))
   498         7        548.5     78.4      0.2      split_red = np.array_split(interpolate_red, lfo_amount)
   499         7        222.4     31.8      0.1      split_green = np.array_split(interpolate_green, lfo_amount)
   500         7        199.6     28.5      0.1      split_blue = np.array_split(interpolate_blue, lfo_amount)
   501                                           
   502         7          3.0      0.4      0.0      lfo_frequencies = []
   503        25         15.7      0.6      0.0      for i in range(lfo_amount):
   504        18       2641.4    146.7      1.0          segment_avg_red = np.mean(split_red[i])
   505        18       2419.9    134.4      1.0          segment_avg_green = np.mean(split_green[i])
   506        18       2355.9    130.9      0.9          segment_avg_blue = np.mean(split_blue[i])
   507        18        369.4     20.5      0.1          max_val = np.max([segment_avg_red, segment_avg_green, segment_avg_blue])
   508        18        243.3     13.5      0.1          min_val = np.min([segment_avg_red, segment_avg_green, segment_avg_blue])
   509                                           
   510        18         12.5      0.7      0.0          delta = max_val - min_val
   511        18         11.6      0.6      0.0          lightness = (max_val + min_val) / 2
   512                                           
   513        18         10.6      0.6      0.0          if delta == 0:
   514                                                       saturation = 0.01
   515                                                   else:
   516        18          9.0      0.5      0.0              if lightness < 0.5:
   517        13          7.4      0.6      0.0                  saturation = delta / (max_val + min_val)
   518                                                       else:
   519         5          5.1      1.0      0.0                  saturation = delta / (2 - max_val - min_val)
   520                                           
   521        18          8.7      0.5      0.0          if max_val == segment_avg_red:
   522        11          5.0      0.5      0.0              lfo_frequencies.append('square')
   523         7          2.6      0.4      0.0          elif max_val == segment_avg_blue:
   524         6          3.9      0.7      0.0              lfo_frequencies.append('sine')
   525                                                   else:
   526         1          0.9      0.9      0.0              lfo_frequencies.append('sawtooth')
   527                                           
   528         7       2618.8    374.1      1.0      lfo_sound = np.ones_like(sound)
   529        25         53.0      2.1      0.0      for i in range(len(lfo_frequencies)):
   530        18         26.6      1.5      0.0          if lfo_frequencies[i] == 'sine':
   531         6      26096.7   4349.4     10.3              lfo_sound *= (interpolate_blue * scalar_amplitude) * np.sin(2 * np.pi * (map_to_range_with_variability(color_average + saturation, 0, 1) * scalar_freq) * time) * intensity
   532        12          6.6      0.6      0.0          elif lfo_frequencies[i] == 'square':
   533        11     187836.0  17076.0     74.1              lfo_sound *= (interpolate_red * scalar_amplitude) * signal.square(2 * np.pi * (map_to_range_with_variability(color_average + saturation, 0, 1) * scalar_freq) * time) * intensity
   534         1          0.5      0.5      0.0          elif lfo_frequencies[i] == 'sawtooth':
   535         1      21247.4  21247.4      8.4              lfo_sound *= (interpolate_green * scalar_amplitude) * signal.sawtooth(2 * np.pi * (map_to_range_with_variability(color_average + saturation, 0, 1) * scalar_freq) * time) * intensity
   536                                           
   537         7       6558.5    936.9      2.6      return multiply_wave(lfo_sound, sound)

Total time: 1.09845 s
File: imagetoaudio.py
Function: modify_base_tone at line 539

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   539                                           @profile
   540                                           def modify_base_tone(sound, color_average, overtone_type,base_freq, time, interpolate_red, interpolate_green, interpolate_blue, intensity=1, scalar_freq=1, scalar_amplitude=1,overtone_num_scalar=1):
   541                                               """
   542                                               Modify a base sound wave by applying overtones and a low frequency
   543                                               oscillator (LFO).
   544                                           
   545                                               Parameters
   546                                               ----------
   547                                               sound : numpy array
   548                                                   The input sound wave to be modified.
   549                                               color_average : float
   550                                                   The average color value of the image.
   551                                               overtone_type : str
   552                                                   The type of overtones to apply. Can be 'sine', 'square', or 'sawtooth'.
   553                                               time : numpy array
   554                                                   The time array of the sound wave.
   555                                               interpolate_red : numpy array
   556                                                   The interpolated red color channel of the image.
   557                                               interpolate_green : numpy array
   558                                                   The interpolated green color channel of the image.
   559                                               interpolate_blue : numpy array
   560                                                   The interpolated blue color channel of the image.
   561                                               intensity : float, optional
   562                                                   The intensity of the LFO. Defaults to 1.
   563                                               scalar_freq : float, optional
   564                                                   The frequency scalar of the LFO. Defaults to 1.
   565                                               scalar_amplitude : float, optional
   566                                                   The amplitude scalar of the LFO. Defaults to 1.
   567                                           
   568                                               Returns
   569                                               -------
   570                                               numpy array
   571                                                   The modified sound wave.
   572                                               """
   573         7          4.4      0.6      0.0      if sound is None:
   574                                                   raise ValueError('Input sound cannot be null')
   575         7          3.4      0.5      0.0      if color_average is None:
   576                                                   raise ValueError('Input color_average cannot be null')
   577         7          5.9      0.8      0.0      if overtone_type not in ['sine', 'square', 'sawtooth']:
   578                                                   raise ValueError('Invalid overtone_type. Must be "sine", "square", or "sawtooth"')
   579         7          3.2      0.5      0.0      if time is None:
   580                                                   raise ValueError('Input time array cannot be null')
   581         7          3.5      0.5      0.0      if interpolate_red is None or interpolate_green is None or interpolate_blue is None:
   582                                                   raise ValueError('Interpolated color channels cannot be null')
   583                                           
   584         7     843254.6 120464.9     76.8      sound = apply_overtones(sound = sound, wave_type = overtone_type, time = time, base_freq=base_freq, brightness= brightness(rgb = (interpolate_red, interpolate_green, interpolate_blue)), rgb_dict = {'1': interpolate_red, '2': interpolate_green, '3': interpolate_blue},overtone_num_scalar=overtone_num_scalar)
   585                                           
   586                                               # Apply LFO
   587         7     255163.8  36452.0     23.2      sound = apply_lfo(sound = sound , color_average = color_average, time = time, interpolate_red=interpolate_red, interpolate_green=interpolate_green, interpolate_blue=interpolate_blue, intensity = intensity, scalar_freq = scalar_freq, scalar_amplitude = scalar_amplitude)
   588                                           
   589         7          9.4      1.3      0.0      return sound

Total time: 7.03919 s
File: imagetoaudio.py
Function: main_generation_handler at line 591

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   591                                           @profile
   592                                           def main_generation_handler(
   593                                                   img_path: str,
   594                                                   out_path: str,
   595                                                   kernel_size: int,
   596                                                   step_size: int,
   597                                                   sound_level: int,
   598                                                   sample_rate: int,
   599                                                   sound_duration: int,
   600                                                   modulation_duration: int,
   601                                                   modulation_intensity: float,
   602                                                   modulation_envelope_intensity: float,
   603                                                   overtone_num_scalar: float,
   604                                                   lfo_scalar_freq: float,
   605                                                   lfo_scalar_amplitude: float,
   606                                                   lfo_intensity: float
   607                                           ):
   608                                               
   609                                               
   610                                               #check if img_path is single file or folder, accept any img file path
   611                                               """
   612                                               Handles image to audio conversion, given an image path, output path, and conversion parameters
   613                                           
   614                                               Parameters
   615                                               ----------
   616                                               img_path: str
   617                                                   path to the image file or folder containing image files
   618                                               out_path: str
   619                                                   path to the output folder where the audio files will be saved
   620                                               kernel_size: int
   621                                                   size of the convolution kernel
   622                                               step_size: int
   623                                                   step size for the convolution
   624                                               sound_level: int
   625                                                   level of the sound (0-100)
   626                                               sample_rate: int
   627                                                   sample rate of the audio
   628                                               sound_duration: int
   629                                                   duration of the sound in seconds
   630                                               modulation_intensity: float
   631                                                   intensity of the modulation (0-1)
   632                                               modulation_envelope_intensity: float
   633                                                   intensity of the modulation envelope (0-1)
   634                                               lfo_scalar_freq: float
   635                                                   scalar frequency for the LFO
   636                                               lfo_scalar_amplitude: float
   637                                                   scalar amplitude for the LFO
   638                                               lfo_intensity: float
   639                                                   intensity of the LFO (0-1)
   640                                           
   641                                               Returns
   642                                               -------
   643                                               None
   644                                               """
   645         1         81.2     81.2      0.0      if os.path.isdir(img_path):
   646         1       2833.4   2833.4      0.0          image_files = glob.glob(os.path.join(img_path, "*.jpg")) + glob.glob(os.path.join(img_path, "*.png"))
   647                                                   
   648         1          0.4      0.4      0.0          images = []
   649         1          0.3      0.3      0.0          file_names = []
   650                                           
   651         1         66.9     66.9      0.0          print("Processing image batch...")
   652         8          6.1      0.8      0.0          for file in image_files:
   653         7        227.3     32.5      0.0              file_name = os.path.splitext(os.path.basename(file))[0]
   654         7        892.7    127.5      0.0              print("Processing image: "+file_name)
   655         7          8.7      1.2      0.0              file_names.append(file_name)
   656         7      69754.7   9965.0      1.0              img = Image.open(file)
   657         7     166417.9  23774.0      2.4              img = img.convert('RGB')
   658         7      40267.6   5752.5      0.6              img_array = np.asarray(img)
   659                                                       
   660                                                       #check if image dimensions are greater than 3840*2160
   661         7         13.2      1.9      0.0              if img_array.shape[0] > 3840 or img_array.shape[1] > 2160:
   662         1         66.8     66.8      0.0                  print("Error: Image dimensions are greater than 3840*2160, resizing to 3840*2160")
   663         1     195125.9 195125.9      2.8                  img = img.resize((3840, 2160))
   664         1      19750.1  19750.1      0.3                  img_array = np.asarray(img)
   665                                           
   666         7          5.7      0.8      0.0              images.append(img_array)
   667                                           
   668         1         33.6     33.6      0.0          print("Convolving image batch...")
   669         8         11.6      1.5      0.0          for n in range(len(images)):
   670         7       1279.5    182.8      0.0              print("Convolving image: "+file_names[n])
   671                                           
   672         7    5069013.3 724144.8     72.0              rgb_dict = image_convolution(images[n], kernel_size, step_size)
   673                                           
   674        14    1472801.9 105200.1     20.9              generate_sound(rgb_dict = rgb_dict, 
   675         7          3.7      0.5      0.0                  out_path = out_path,
   676         7          2.9      0.4      0.0                  sound_level = sound_level,
   677         7          3.5      0.5      0.0                  sample_rate = sample_rate,
   678         7          3.3      0.5      0.0                  sound_duration = sound_duration,
   679         7          3.2      0.5      0.0                  modulation_intensity = modulation_intensity,
   680         7          3.2      0.5      0.0                  modulation_envelope_intensity = modulation_envelope_intensity,
   681         7          1.9      0.3      0.0                  modulation_duration = modulation_duration,
   682         7          2.5      0.4      0.0                  lfo_scalar_freq = lfo_scalar_freq,
   683         7          2.4      0.3      0.0                  lfo_scalar_amplitude = lfo_scalar_amplitude,
   684         7          2.0      0.3      0.0                  lfo_intensity = lfo_intensity,
   685         7          2.1      0.3      0.0                  overtone_num_scalar = overtone_num_scalar,
   686         7          3.8      0.5      0.0                  file_name=file_names[n]
   687                                           
   688                                                       )
   689         7        492.1     70.3      0.0              print("Audio generated for: "+file_names[n])
   690                                           
   691                                               else:
   692                                                   image = Image.open(img_path)
   693                                                   image = image.convert('RGB')
   694                                                   image_array = np.asarray(image)
   695                                           
   696                                                   #check if image dimensions are greater than 3840*2160
   697                                                   if image_array.shape[0] > 3840 or image_array.shape[1] > 2160:
   698                                                       print("Error: Image dimensions are greater than 3840*2160, resizing to 3840*2160")
   699                                                       file_name = os.path.splitext(os.path.basename(img_path))[0]
   700                                                       image = image.resize((3840, 2160))
   701                                                       image_array = np.asarray(image)
   702                                           
   703                                                   print("Convolving image: "+file_name)
   704                                                   rgb_dict = image_convolution(image_array, kernel_size, step_size)
   705                                           
   706                                                   generate_sound(rgb_dict = rgb_dict, 
   707                                                       out_path = out_path,
   708                                                       sound_level = sound_level,
   709                                                       sample_rate = sample_rate,
   710                                                       sound_duration = sound_duration,
   711                                                       modulation_intensity = modulation_intensity,
   712                                                       modulation_envelope_intensity = modulation_envelope_intensity,
   713                                                       modulation_duration = modulation_duration,
   714                                                       lfo_scalar_freq = lfo_scalar_freq,
   715                                                       lfo_scalar_amplitude = lfo_scalar_amplitude,
   716                                                       lfo_intensity = lfo_intensity,
   717                                                       overtone_num_scalar = overtone_num_scalar,
   718                                                       file_name=file_name
   719                                                   )
   720                                                   print("Audio generated for: "+file_name)
   721                                           
   722         1          2.1      2.1      0.0      pass

